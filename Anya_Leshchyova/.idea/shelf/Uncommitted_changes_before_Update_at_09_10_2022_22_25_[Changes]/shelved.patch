Index: main.cpp
===================================================================
diff --git a/main.cpp b/main.cpp
deleted file mode 100644
--- a/main.cpp	(revision 561c0897cbf738d857184c294f5befcc08ecc33e)
+++ /dev/null	(revision 561c0897cbf738d857184c294f5befcc08ecc33e)
@@ -1,189 +0,0 @@
-#include <iostream>
-#define _CRT_SECURE_NO_WARNINGS
-#include <malloc.h>
-#include <stdlib.h> // под динамические масивы
-
-//структуры
-
-
-typedef struct {
-    char *name;
-    bool wish;
-
-} Identification; // структура имени и желания клиента (ипотека или вклад)
-
-
-typedef struct {
-    int beginning; // начальный капитал
-    int beginning_contribution; // начальная выплата по ипотеке
-    int flat; // стоимость квартиры
-    int income; // доходы
-    int expenses;  // расходы
-    unsigned int time_year; // время на погашение ипотеки, год
-
-}money;
-
-
-typedef struct {
-    unsigned int row; // число строк, целое положительное
-    unsigned int col; // число столбцов, целое положительное
-    long long int ** massive;
-}matrix;   // структура задаёт размеры матрицы и саму матрицу
-
-
-typedef struct {
-    double percent_mortgages; // процент ипотеки
-    double deposit_interest;  // процент вклада
-    double percentage_increase; // на сколько увеличивается процент по прошествию половины срока
-} percent; // структура процентов
-
-
-
-// задаём параметры
-
-
-// первый клиент
-Identification сlient_1 ={"Alice", false};
-
-const percent сlient_percent_1 ={0.09,0.02,0.02};
-
-const money сlient_money_1  ={100000, 300000,15000500, 150000,40000,20};
-
-const matrix сlient_matrix_1={20,1};
-
-
-//второй клиент
-Identification client_2 ={"Bob", true};
-
-const percent сlient_percent_2 ={0.09,0.0001,0.02};
-
-const money сlient_money_2  ={100000, 300000,15000500, 150000,25000,20};
-
-const matrix сlient_matrix_2={20,1};
-
-
-
-//row строка, col столбец
-// функция возвращает память для матрицы
-long long int **memory (unsigned int row,unsigned int col ){
-    long long int **a;
-    a = (long long int**)malloc(row * sizeof(long long int*)); //выделение памяти под указатели на строки
-    for (int i = 0; i<row; i++)  // цикл по строкам
-    {
-        a[i] = (long long int *) malloc(col * sizeof(long long int));// Выделение памяти под хранение строк
-    }
-    return a;
-}
-
-
-// вычисление ежемесячного платежа
-int monthly_payment_F (const money A,const  percent B ) {
-
-    int monthly_payment = ((A.flat + A.flat * B.percent_mortgages)/ (A.time_year*12));
-    return monthly_payment;
-}
-
-
-//вычисления момента когда увеличивается процент по вкладу
-double percentage_increase(int a,int b, double c,double d ){
-    double rez;
-    if( a>b/a){
-        rez=c+d;
-    }
-    else {
-        rez=c;
-    }
-    return rez;
-}
-
-
-// вычисление вклада
-matrix deposit (const money A, const percent B, const matrix C){
-    matrix result = {C.row, C.col};
-    result.massive = memory(result.row, result.col);
-    long long int a,b;
-    double per_increase;
-    long long int residue = A.beginning;
-    for (int i=1; i<=A.time_year;i++){
-        per_increase=percentage_increase(i,A.time_year,B.deposit_interest,B.percentage_increase);
-        a= (residue+A.income*12-A.expenses*12);
-        residue=a*per_increase+a;
-        result.massive[i-1][0]=residue;
-    }
-    return result;
-}
-
-
-//вычисление ипотеки
-matrix mortgages (const money A, const percent B, const matrix C){
-    matrix result = {C.row, C.col};
-    result.massive = memory(result.row, result.col);
-    long long int monthly_payment=monthly_payment_F(money(A), percent(B));
-    long long int a;
-    double per_increase;
-    long long int residue = A.beginning - A.beginning_contribution;
-    for (int i=1; i<=A.time_year;i++){
-        per_increase=percentage_increase(i,A.time_year,B.deposit_interest,B.percentage_increase);
-        a= (residue+(A.income-A.expenses-monthly_payment)*12);
-        residue=a*per_increase+a;
-        result.massive[i-1][0]=residue;
-    }
-    return result;
-}
-
-
-//функция вывода
-void Itog (matrix A){
-    for (int i = 0; i < A.row; i++){
-        for (int j = 0; j < A.col; j++){
-            printf("Years %d  %d",i+1, A.massive[i][j]);
-        }
-        printf("\n");
-    }
-    printf("\n");
-}
-
-
-//показывает на какой год клиент сможет купить квартиру, если возьмет вклад
-void Apartment_purchase(const money A, const percent B, const matrix C){
-    // matrix result={A.time_year, 1};
-    //result.massive = memory(A.time_year, 1);
-    matrix result=deposit ( money(A) ,  percent (B),  matrix (C));
-    int k=0,n=0;
-    for (int i = 0; i < result.row; i++){
-        for (int j = 0; j < result.col; j++){
-            k=k+1;
-            if(result.massive[i][j]>A.flat and n==0){
-                printf ("You buy an apartment for %d years\n",k);
-                n=1;
-            }
-        }
-    }
-}
-
-
-// приветствует клиента и, основываясь на его желаниях, показывает результат вычисления
-Identification name (const Identification A) {
-    Identification B = {A.name, A.wish};
-    //B.Cl = memory(2);
-    printf("\n");
-    printf("           Helloy  %s\n",A.name);
-    if( B.wish== true) {
-        printf("           Mortgage calculator\n");
-        Itog(mortgages(сlient_money_2,сlient_percent_2,сlient_matrix_2));
-    }
-    else {
-        printf("           Deposit calculator\n");
-        Itog(deposit(сlient_money_1,сlient_percent_1,сlient_matrix_1));
-        Apartment_purchase(сlient_money_1,сlient_percent_1,сlient_matrix_1);
-    }
-    B.name=NULL;
-    return B;
-}
-
-
-int main() {
-    name(сlient_1);
-    name(client_2);
-    return 0;
-}
Index: Alice_and_Bob/Version 1.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#include <iostream>\r\n#define _CRT_SECURE_NO_WARNINGS\r\n#include <malloc.h>\r\n#include <stdlib.h> // под динамические масивы\r\n\r\n//структуры\r\n\r\n\r\ntypedef struct {\r\n    char *name;\r\n    bool wish;\r\n\r\n} Identification; // структура имени и желания клиента (ипотека или вклад)\r\n\r\n\r\ntypedef struct {\r\n    int beginning; // начальный капитал\r\n    int beginning_contribution; // начальная выплата по ипотеке\r\n    int flat; // стоимость квартиры\r\n    int income; // доходы\r\n    int expenses;  // расходы\r\n    unsigned int time_year; // время на погашение ипотеки, год\r\n\r\n}money;\r\n\r\n\r\ntypedef struct {\r\n    unsigned int row; // число строк, целое положительное\r\n    unsigned int col; // число столбцов, целое положительное\r\n    long long int ** massive;\r\n}matrix;   // структура задаёт размеры матрицы и саму матрицу\r\n\r\n\r\ntypedef struct {\r\n    double percent_mortgages; // процент ипотеки\r\n    double deposit_interest;  // процент вклада\r\n    double percentage_increase; // на сколько увеличивается процент по прошествию половины срока\r\n} percent; // структура процентов\r\n\r\n\r\n\r\n// задаём параметры\r\n\r\n\r\n// первый клиент\r\nIdentification сlient_1 ={\"Alice\", false};\r\n\r\nconst percent сlient_percent_1 ={0.09,0.02,0.02};\r\n\r\nconst money сlient_money_1  ={100000, 300000,15000500, 150000,40000,20};\r\n\r\nconst matrix сlient_matrix_1={20,1};\r\n\r\n\r\n//второй клиент\r\nIdentification client_2 ={\"Bob\", true};\r\n\r\nconst percent сlient_percent_2 ={0.09,0.0001,0.02};\r\n\r\nconst money сlient_money_2  ={100000, 300000,15000500, 150000,25000,20};\r\n\r\nconst matrix сlient_matrix_2={20,1};\r\n\r\n\r\n\r\n//row строка, col столбец\r\n// функция возвращает память для матрицы\r\nlong long int **memory (unsigned int row,unsigned int col ){\r\n    long long int **a;\r\n    a = (long long int**)malloc(row * sizeof(long long int*)); //выделение памяти под указатели на строки\r\n    for (int i = 0; i<row; i++)  // цикл по строкам\r\n    {\r\n        a[i] = (long long int *) malloc(col * sizeof(long long int));// Выделение памяти под хранение строк\r\n    }\r\n    return a;\r\n}\r\n\r\n\r\n// вычисление ежемесячного платежа\r\nint monthly_payment_F (const money A,const  percent B ) {\r\n\r\n    int monthly_payment = ((A.flat + A.flat * B.percent_mortgages)/ (A.time_year*12));\r\n    return monthly_payment;\r\n}\r\n\r\n\r\n//вычисления момента когда увеличивается процент по вкладу\r\ndouble percentage_increase(int a,int b, double c,double d ){\r\n    double rez;\r\n    if( a>b/a){\r\n        rez=c+d;\r\n    }\r\n    else {\r\n        rez=c;\r\n    }\r\n    return rez;\r\n}\r\n\r\n\r\n// вычисление вклада\r\nmatrix deposit (const money A, const percent B, const matrix C){\r\n    matrix result = {C.row, C.col};\r\n    result.massive = memory(result.row, result.col);\r\n    long long int a,b;\r\n    double per_increase;\r\n    long long int residue = A.beginning;\r\n    for (int i=1; i<=A.time_year;i++){\r\n        per_increase=percentage_increase(i,A.time_year,B.deposit_interest,B.percentage_increase);\r\n        a= (residue+A.income*12-A.expenses*12);\r\n        residue=a*per_increase+a;\r\n        result.massive[i-1][0]=residue;\r\n    }\r\n    return result;\r\n}\r\n\r\n\r\n//вычисление ипотеки\r\nmatrix mortgages (const money A, const percent B, const matrix C){\r\n    matrix result = {C.row, C.col};\r\n    result.massive = memory(result.row, result.col);\r\n    long long int monthly_payment=monthly_payment_F(money(A), percent(B));\r\n    long long int a;\r\n    double per_increase;\r\n    long long int residue = A.beginning - A.beginning_contribution;\r\n    for (int i=1; i<=A.time_year;i++){\r\n        per_increase=percentage_increase(i,A.time_year,B.deposit_interest,B.percentage_increase);\r\n        a= (residue+(A.income-A.expenses-monthly_payment)*12);\r\n        residue=a*per_increase+a;\r\n        result.massive[i-1][0]=residue;\r\n    }\r\n    return result;\r\n}\r\n\r\n\r\n//функция вывода\r\nvoid Itog (matrix A){\r\n    for (int i = 0; i < A.row; i++){\r\n        for (int j = 0; j < A.col; j++){\r\n            printf(\"Years %d  %d\",i+1, A.massive[i][j]);\r\n        }\r\n        printf(\"\\n\");\r\n    }\r\n    printf(\"\\n\");\r\n}\r\n\r\n\r\n//показывает на какой год клиент сможет купить квартиру, если возьмет вклад\r\nvoid Apartment_purchase(const money A, const percent B, const matrix C){\r\n    // matrix result={A.time_year, 1};\r\n    //result.massive = memory(A.time_year, 1);\r\n    matrix result=deposit ( money(A) ,  percent (B),  matrix (C));\r\n    int k=0,n=0;\r\n    for (int i = 0; i < result.row; i++){\r\n        for (int j = 0; j < result.col; j++){\r\n            k=k+1;\r\n            if(result.massive[i][j]>A.flat and n==0){\r\n                printf (\"You buy an apartment for %d years\\n\",k);\r\n                n=1;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// приветствует клиента и, основываясь на его желаниях, показывает результат вычисления\r\nIdentification name (const Identification A) {\r\n    Identification B = {A.name, A.wish};\r\n    //B.Cl = memory(2);\r\n    printf(\"\\n\");\r\n    printf(\"           Helloy  %s\\n\",A.name);\r\n    if( B.wish== true) {\r\n        printf(\"           Mortgage calculator\\n\");\r\n        Itog(mortgages(сlient_money_2,сlient_percent_2,сlient_matrix_2));\r\n    }\r\n    else {\r\n        printf(\"           Deposit calculator\\n\");\r\n        Itog(deposit(сlient_money_1,сlient_percent_1,сlient_matrix_1));\r\n        Apartment_purchase(сlient_money_1,сlient_percent_1,сlient_matrix_1);\r\n    }\r\n    B.name=NULL;\r\n    return B;\r\n}\r\n\r\n\r\nint main() {\r\n    name(сlient_1);\r\n    name(client_2);\r\n    return 0;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Alice_and_Bob/Version 1.cpp b/Alice_and_Bob/Version 1.cpp
--- a/Alice_and_Bob/Version 1.cpp	(revision 561c0897cbf738d857184c294f5befcc08ecc33e)
+++ b/Alice_and_Bob/Version 1.cpp	(date 1665343499827)
@@ -10,32 +10,31 @@
     char *name;
     bool wish;
 
-} Identification; // структура имени и желания клиента (ипотека или вклад)
+} Identification;  // структура имени и желания клиента (ипотека или вклад)
 
 
 typedef struct {
-    int beginning; // начальный капитал
-    int beginning_contribution; // начальная выплата по ипотеке
-    int flat; // стоимость квартиры
-    int income; // доходы
+    int beginning;  // начальный капитал
+    int beginning_contribution;  // начальная выплата по ипотеке
+    int flat;  // стоимость квартиры
+    int income;  // доходы
     int expenses;  // расходы
-    unsigned int time_year; // время на погашение ипотеки, год
-
+    unsigned int time_year;  // время на погашение ипотеки, год
 }money;
 
 
 typedef struct {
-    unsigned int row; // число строк, целое положительное
-    unsigned int col; // число столбцов, целое положительное
+    unsigned int row;  // число строк, целое положительное
+    unsigned int col;  // число столбцов, целое положительное
     long long int ** massive;
 }matrix;   // структура задаёт размеры матрицы и саму матрицу
 
 
 typedef struct {
-    double percent_mortgages; // процент ипотеки
+    double percent_mortgages;  // процент ипотеки
     double deposit_interest;  // процент вклада
-    double percentage_increase; // на сколько увеличивается процент по прошествию половины срока
-} percent; // структура процентов
+    double percentage_increase;  // на сколько увеличивается процент по прошествию половины срока
+} percent;  // структура процентов
 
 
 
